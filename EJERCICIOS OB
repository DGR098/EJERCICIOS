import jdk.jshell.spi.ExecutionControl;

import javax.swing.event.InternalFrameAdapter;
import java.io.*;
import java.lang.reflect.Array;
import java.nio.file.Path;
import java.util.*;

import static jdk.jpackage.internal.IOUtils.copyFile;


public class Reverso {

// EJERCICIO 1

public class alReves {
        
    public static void main(String[] args) {
    

    Scanner scanner = new Scanner(System.in);
    String texto;
    System.out.println("Introduce un texto");
    texto = scanner.nextLine();

    StringBuilder reves = new StringBuilder(texto);
    texto = reves.reverse().toString();

    System.out.println(texto);
}

}

        // EJERCICIO 2
public class matriz {

    public static void main(String[] args) {
        

        String[] strings = {"Hola", "Que", "Tal"}; 

            for (int i = 0; i < strings.length; i++) {

            System.out.println("Posicion " + i + " de " + strings[i]);
        }

    }
    
}


        // EJERCICIO 3
public class matrizDoble {

    public static void main(String[] args) {
        

        int[][] enteros = new int[2][2];
        enteros[0][0] = 1;
        enteros[0][1] = 2;

        enteros[1][0] = 10;
        enteros[1][1] = 20;

        for (int i = 0; i < enteros.length; i++) {
            for (int j = 0; j < enteros[i].length; j++) {

            System.out.println("Posicion:   [" + i + "]  [" + j + "] de " + enteros[i][j]);
        }
    }
    }
    
}

        // EJERCICIO 4
public class vector {

    public static void main(String[] args) {
        
    
    Vector<Integer> bector =  new Vector<>();
    bector.add(1);
    bector.add(2);
    bector.add(3);
    bector.add(4);
    bector.add(5);

    bector.remove(1);
    bector.remove(1);

    System.out.println(bector);
    
}
}

        // EJERCICIO 5

        // el problema de utilizar un Vector con la capcidad por defecto de 1000 elementos
        // Es que estariamos utilizando mas memoria de la necesaria,
        // ya que el vector aumenta su capacidad de 10 en 10, y eso afectaria al rendimiento del programa


        // EJERCICIO 6
public class arrayList {

    public static void main(String[] args) {
        

        ArrayList<String> aray =  new ArrayList<>();
        aray.add("Aa");
        aray.add("Bb");
        aray.add("Cc");

        LinkedList<String> link =  new LinkedList<>(aray);

        System.out.println(link);
        
        for (String elemento : link) {
            System.out.println(elemento);
        }
    }
    
}

        // EJERCICIO 7
public class arayListInt {

    public static void main(String[] args) {
        
        ArrayList<Integer> entero = new ArrayList<>();
        
        for (int i = 0; i < 11; i++) {
            entero.add(i);
        }

        Iterator<Integer> iter = entero.iterator(); 
        while (iter.hasNext()); {
        int enteros = iter.next();
        if (enteros % 2 == 0); {
            iter.remove();
        }
        System.out.println(entero);
        }

        for (int enteros : entero) {
            System.out.println(enteros);
        }
    }
    
}

        // EJERCICIO 8
public class tryCatch {

    private static int Dividir(int a, int b) throws ArithmeticException {
        return a / b;
    }

    public static void main(String[] args) {


        Scanner scanner = new Scanner(System.in);
        System.out.println("Ingresa dos numeros a dividir: ");

        System.out.print("Numero 1: ");
        int a = scanner.nextInt();

        System.out.print("Numero 2: ");
        int b = scanner.nextInt();

        try {
            System.out.println("Resultado: " + Dividir(a, b));
        } catch (ArithmeticException e) {
            System.out.println("Esta division no es posible");
        } finally {
            System.out.println("Demo de c√≥digo");
        }
    }
    
}


        // EJERCICIO 9

public class copiarFicheros {

    public static void main(String[] args) {
        

        Scanner scanner = new Scanner(System.in);
        System.out.println("Ingresa el fichero de origen");
        String fileIn = scanner.nextLine();
        System.out.println("Ingresa el fichero de destino");
        String fileOut = scanner.nextLine();
        copiar(fileIn, fileOut);
    }

    private static void copiar(String fileIn, String fileOut) {
        try {
            InputStream in = new FileInputStream(fileIn);
            byte[] datos = in.readAllBytes();
            in.close();

            PrintStream out = new PrintStream(fileOut);
            out.write(datos);
            out.close();
        } catch (Exception e) {
            System.out.println("Excepcion: " + e.getMessage());
        }
    }
    
}

        // EJERCICIO 10
        // Hize un programa que funciona como regisro de pedidos de comida

public class invento {

    public static void main(String[] args) {
        

         try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            PrintStream printStream = new PrintStream(System.out);
            Map<String, List<String>> dataStorage = new HashMap<>();

            while (true) {
                printStream.println("Ingrese una comida (o 'salir' para terminar):");
                String key = reader.readLine();

                if (key.equalsIgnoreCase("salir")) {
                    break;
                }

                printStream.println("Ingrese la cantidad:");
                String value = reader.readLine();

                List<String> values = dataStorage.getOrDefault(key, new ArrayList<>());
                values.add(value);
                dataStorage.put(key, values);
                System.out.println("Pedido");
            }

            printStream.println("Tu pedido es:");
            for (Map.Entry<String, List<String>> entry : dataStorage.entrySet()) {
                String key = entry.getKey();
                List<String> values = entry.getValue();
                printStream.println("Comida: " + key);
                printStream.println("Cantidad:");
                for (String value : values) {
                    printStream.println("- " + value);
                }
                printStream.println();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }

        }
}

